                                               AOP基本使用
1、切面aop可以在不变更主要执行方法的情况下，在方法执行前后添加其他执行方法，恰似将这些方法无缝织入主方法。
2、使用时，在切面类上加@Aspect注解，定义此类为切面类，同时加@Component注解，将切面类加入Spring容器。
3、定义切点（pointCut）,最好定义切点，否则需在通知上反复定义连接点。
4、添加maven
 <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
 </dependency>
5、配置文件：
默认打开，spring.aop.auto=true
6、代码如下：
@Aspect//定义切面类
@Component
@Order(2)//当有多个切面类对同一个方法增强时，使用Order注解能指明哪个切面先执行
public class MyAspect {
    @Pointcut("execution(* com.lihang.aopstudy.controller.MyController.testAopSuccess(..))")//定义切点和连接点,一个切点中和有多个连接点
    public void myPointCut(){}
    @Before("myPointCut()")//前置通知
    public void before(JoinPoint joinPoint){
        System.out.println("方法执行:before1");
    }
    @After("myPointCut()")
    public void after(){
        System.out.println("方法执行：after1");
    }
   @AfterThrowing("myPointCut()")
    public void afterThrowing(){
        System.out.println("方法执行：afterThrowing1");
    }
    @Around("myPointCut()")
    public void around(ProceedingJoinPoint point) throws Throwable {
        System.out.println("方法执行：around1");
        point.proceed();
        System.out.println("方法执行：around2");
    }
     @AfterReturning("myPointCut()")
    public void afterReturning(){
        System.out.println("方法执行：afterReturning1");
    }
        @AfterThrowing("execution(* com.lihang.aopstudy.controller.MyController.testAopError(..))")
    public void testAfterThrowing(){
            System.out.println("执行错误后执行");
    }
}

    *         com.lihang.aopstudy.controller.MyController.testAopSuccess(..))
任意返回值                       包                           方法名     任意参数
7、注意
  环绕通知Around中的参数为ProceedingJoinPoint，且在方法中必须加point.proceed(),否则前置通知和主方法不会执行。其他通知的参数为JoinPint.
  
8、切点：
   AspectJ 指示器	描述
    args()	        限制连接点的指定参数为指定类型的执行方法
    @args()	        限制连接点匹配参数由指定注解标注的执行方法
    execution ()	用于匹配连接点的执行方法
    this ()	        限制连接点匹配 AOP 代理的 Bean 引用为指定类型的类
    target ()	        限制连接点匹配特定的执行对象，这些对象对应的类要具备指定类型注解
    within()	       限制连接点匹配指定类型
    @within()	       限制连接点匹配指定注释所标注的类型（当使用 Spring AOP 时，方法定义在由指定的注解所标注的类里）
    @annotation	       限制匹配带有指定注释的连接点
以上指示器只有execution是唯一执行匹配，其他指示器都是用于限制匹配的。
@Aspect
@Component
public class TestPointCutAspect {
    @Pointcut("args(Integer)&&within(com.lihang.aopstudy.service.*)&&@within(org.springframework.stereotype.Service)")
    public void pointCut(){ }

    @Before("pointCut()")
    public void before(){
        System.out.println("执行方法：before");
    }
}

获取请求相关信息：可用在通知里
ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
HttpServletRequest request = attributes.getRequest();




























