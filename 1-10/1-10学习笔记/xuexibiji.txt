/*
关键字的特点：
	1.完全小写的字母
	2.在增强版的记事本当中（例如Notepad++）有特殊颜色
*/

/*
标识符
标识符：是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。
	HelloWorld案例中，出现的标识符有类的名字HelloWorld。
命名规则：硬性要求
	标识符可以包含 英文字母26个（区分大小写）、0-9数字、$（美元符号）和_（下划线）。
	标识符不能以数字开头。
	标识符不能是关键字。
命名规范：软性建议
	类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。HelloWorld
	变量名规范：首字母小写，后面每个单词首字母大写（小驼峰式）。helloWorld
	方法名规范：同变量名
*/

/*
常量：在程序运行期间，固定不变的量。

常量的分类：
1.字符串常量：凡是用双引号引起来的部分，叫做字符串常量。例如：“abc”、“Hello”、“123”
2.整数常量：直接写上的数字，没有小数点。例如：100、200、0、-250
3.浮点数常量：直接写上的数字，有小数点。例如：2.5、-3.14、0.0
4.字符常量：凡是用单引号引起来的单个字符，叫做字符常量。例如：‘A’、‘b’、‘中’
5.布尔常量：只有两种取值。true、false。
6.空常量：null。代表没有任何数据。
*/

/*
数据类型：
基本数据类型
	整数型 byte short int long
	浮点型 float double
	字符型 char
	布尔型 bool
	
引用数据类型（今后学习）
	字符串、数组、接口、lambda
	
注意事项：
1.字符串不是基本类型，而是引用类型。
2.浮点型可能只是一个近似值，并非精确的值。
3.数据范围与字节数不一定相关，例如float数据范围比long更加广泛，但是float是4字节，long是8字节。
4.浮点数当中默认类型是double。如果一定要使用float类型，需要加上一个后缀F。
	如果是整数，默认为int类型，如果一定要使用long类型，需要加上一个后缀L。推荐使用大写字母后缀。
	System.out.println(100L);//100从整数型变成了long
*/

/*
变量：程序运行期间，内容可以发送改变的量。

创建一个变量并且使用的格式：

数据类型 变量名称；//创建了一个变量
变量名称 = 数据值；//赋值，将右边的数据值，赋值交给左边的变量当中

一步到位的格式：

数据类型 变量名称 = 数据值；//在创建一个变量的同时，立刻放入指定的数据值。


使用变量的时候，有一些注意事项：
1.如果创建多个变量，那么变量之间的变量名称不可以重复。
2.对于float和long类型来说，字母后缀F和L不用丢掉。
3.如果使用byte或者short类型的变量，那么右侧的数据值不能超过左侧类型的范围。
4.没有进行赋值的变量，不能直接使用；一定要赋值之后，才能使用。
5.变量使用不能超过作用域的范围
【作用域】：从定义变量的一行开始，一直到直接所属的大括号结束为止。
6.可以通过一个语句来创建多个变量，但是一般情况不推荐这么写。
*/

/*
当数据类型不一致时，将会发送数据类型转换

自动类型转换（隐式）
	1.特点：代码不需要进行特殊处理，自动完成。
	2.规则：数据范围从小到大。
	
强制类型转换（显示）
	1.特点：代码需要进行特殊的格式处理，不能自动完成。
	2.格式：范围小的类型 范围小的变量名 = （范围小的类型）原本范围大的数据；
	
注意事项：
	1.强制类型转换一般不推荐使用，因为有可能发生精度损失、数据溢出。
	2.byte/short/char这三种类型都可以发生数学运算，例如加法"+".
	3.byte/short/char这三种类型在运算的时候，都会首先提升成为int类型，然后再计算
	4.boolean类型不能发生数据类型转换
	
数字和字符的对照关系表（编码表）：

ASCII码表：American Standard Code for Information Interchange，美国信息交互标准代码。
Unicode码表：万国码，也是数字和符合的对照关系，开头0-127部分和ASCII完全一样，但是从128开始包含有更多字符。

48 - '0'
65 - 'A'
97 - 'a'
*/

/*
运算符：进行特定操作的符合。例如：+
表达式：用运算符连接起来的式子叫做表达式。例如 20 + 5.又例如： a + b

四则运算：
加： +
减： -
乘： *
除： /

取模（取余数）：%

首先计算得到表达式的结果：然后再打印输出这个结果

对于一个整数的表达式来说，除法用的是整除，整数除以整数，结果仍然是整数。只看商，不看余数。
只有对于整数的除法来说，取模运算符才有余数的意义。

注意事项：
	1.一旦运算当中有不同类型的数据，那么结果将会是数据类型范围大的那种。
	
四则元素当中的加号“+”有常见的三种用发：

	1.对于数值来说，那就是加法。
	2.对于字符char类型来说，在计算之前，char会被提升成为int，然后再计算。
	char类型字符，和int类型数字之间对照关系表：ASCII、Unicode
	3.对于字符串String（首字母大写，并不是关键字）来说，加号代表字符串连接操作。
	任何数据类型和字符串进行连接的时候，结果都会变成字符串
	
自增运算符：++
自减运算符：--

基本含义：让一个变量涨一个数字1，或者让一个变量降一个数字1
使用格式：写在变量名称之前，或者写在变量名称之后。例如：++num，也可以num++
使用方式：
	1.单独使用：不和其他任何操作混合，自己独立成为一个步骤
	2.混合使用：和其他操作混合，例如域赋值混合，或者与打印操作混合，等。
使用区别：
	1.在单独使用的时候，前++和后++没有任何区别。也就是：++num，和num++是完全一样的。
	2.在混合使用的时候，有【重大区别】
		a.如果是前++，那么变量立刻马上+1，然后拿着结果进行使用。	【先加后用】
		b.如果是后++，那么首先使用变量本来的数值，然后再让变量+1.	【先用后加】

注意事项：
	1.只有变量才能使用自增、自减运算符。常量不可发生改变，不可运用
	2.复合赋值运算符其中隐含了一个强制类型转换。
	
赋值运算符分为：

基本赋值运算符：就是一个等号“=”，代表将右侧的数据交给左侧的变量。
	int a = 30；

复合赋值运算符：
	+=		a+=1		相当于		a=a+3
	-+
	*=
	/+
	%=
	
比较运算符：
大于：		>	
小于：		<
大于等于：	>=
小于等于：	<=
相等：		=
不相等：	!=

注意事项：
	1.比较运算符的结果一定是一个Boolean值，成立就是true，不成立就是false
	2.如果进行多次判断，不能连着写
数学当中的写法，例如：1 < x < 3
程序当中【不允许】这种写法

逻辑运算符
与（并且） && 全都是true，否则就是false
或（或者） || 至少一个是true，就是true，全都是false，才是false
非（取反） ！ 本来是true，变成false；本来是false，变成true

与“&&”，或“||”，具有短路效果，如果根据左边已经可以判断得到最终结果，那么右边的代码将不再执行，从而节省一定的性能。

注意事项：
	1.逻辑运算符只能用于boolean值。
	2.与、或需要左右各自有一个boolean值，但是取反只要唯一的一个boolean值即可。
	3.与、或两种运算符，如果有多个条件，可以连续写
	两个条件：条件A && 条件B
	多个条件：条件A && 条件B && 条件C
	
TIPS：
对于1 < x < 3的情况，应该拆成两个部分，然后使用与运算符连接起来

一元运算符：只需要一个数据就可以进行操作的运算符，例如：取反！、自增++、自减--
二元运算符：需要两个数据才可以进行操作的运算符。例如：加法+、赋值=
三元运算符：需要三个数据才可以进行操作的运算符。

格式：
数据类型	变量名称 = 条件判断 ？ 表达式A ： 表达式B

流程：
首先判断条件是否成立：
	如果成立为true，那么将表达式A的值赋值给左侧的变量
	如果不成立为false，那么将表达式B的值赋值给左侧的变量
二者选其一

注意事项：
	1.必须同时保证表达式A和表达式B都符合左侧数据类型的要求。
	2.三元运算符的结果必须被使用。
*/

/*
方法：就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能

定义一个方法的格式：

public static void 方法名称（）{
	方法体
}

方法名称的命名规则和变量一样，使用小驼峰。
方法体：也就是大括号当中可以包含任意条语言。

注意事项：
1.方法定义的先后顺序无所谓。
2.方法的定义不能产生嵌套包含关系。
3.方法定义好了之后，不会执行，如果要想执行，一定要进行方法的【调用】

如何调用方法，格式：
方法名称（）；
*/

/*
switch语句使用的注意事项：
	1.多个case后面的数值不可以重复。
	2.switch后面小括号当中只能是下列数据类型：
	基本数据类型：byte/short/char/int
	引用数据类型：String字符串、enum枚举
	
	3.switch语句格式可以很灵活：前后顺序可以颠倒，而且break语句还可以省略。
	“匹配哪一个case就从哪一个位置向下执行，直到遇到了break或者整体结束为止。”
*/


/*
循环结构的基本组成部分，一般可以分成四部分：

1.初始化语句：在循环开始最初执行，而且只做唯一一次。
2.条件判断：如果成立，则循环继续；如果不成立，则循环退出。
3.循环体：重复要做的事情内容，若干行语句。
4.步进语句：每次循环之后都要进行的扫尾工作，每次 循环结束之后都要执行一次。

for(初始化表达式；布尔表达式；步进表达式){
	循环体
}

While循环有一个标准格式，还有一个扩展格式。

标准格式：
while（条件判断）{
	循环体
}

扩展格式：
初始化语句；
while（条件判断）{
	循环体；
	步进语句
}

do-while循环的标准格式：
do{
	循环体
}while（条件判断）;

扩展格式：
初始化语句
do{
	循环体
	步进语句
}while（条件判断）;

三种循环的区别：
1.如果条件判断从来没有满足锅，那么for循环和while循环将会执行0次，但是do-while循环会执行至少一次。
2.for循环的变量在小括号当中定义，只有循环内部才可以使用。while循环和do-while循环初始化语句本来就在外面，所以出来循环之后还可以继续使用。

break关键字的用法有常见的两种：
1.可以用在switch语句当中，一旦执行，整个switch语句立刻结束。
2.还可以用在循环语句当中，一旦执行，整个循环语句立刻结束，打断循环。

关于循环的选择，有一个小建议：
凡是次数确定的场景多用for循环，否则多用while循环。
*/